/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"
#include "JSepubElementWrapperFactory.h"

#if ENABLE(EPUB3)

#include "JSEPubCaseElement.h"
#include "JSEPubDefaultElement.h"
#include "JSEPubSwitchElement.h"

#include "epubNames.h"

#include "EPubCaseElement.h"
#include "EPubDefaultElement.h"
#include "EPubSwitchElement.h"

#include <wtf/StdLibExtras.h>

#if ENABLE(VIDEO)
#include "Document.h"
#include "Settings.h"
#endif

using namespace JSC;

namespace WebCore {

using namespace epubNames;

typedef JSDOMWrapper* (*CreateepubElementWrapperFunction)(ExecState*, JSDOMGlobalObject*, PassRefPtr<epubElement>);

static JSDOMWrapper* createEPubCaseElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<epubElement> element)
{
    return CREATE_DOM_WRAPPER(exec, globalObject, EPubCaseElement, element.get());
}

static JSDOMWrapper* createEPubDefaultElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<epubElement> element)
{
    return CREATE_DOM_WRAPPER(exec, globalObject, EPubDefaultElement, element.get());
}

static JSDOMWrapper* createEPubSwitchElementWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<epubElement> element)
{
    return CREATE_DOM_WRAPPER(exec, globalObject, EPubSwitchElement, element.get());
}

JSDOMWrapper* createJSepubWrapper(ExecState* exec, JSDOMGlobalObject* globalObject, PassRefPtr<epubElement> element)
{
    typedef HashMap<WTF::AtomicStringImpl*, CreateepubElementWrapperFunction> FunctionMap;
    DEFINE_STATIC_LOCAL(FunctionMap, map, ());
    if (map.isEmpty()) {
       map.set(epub_caseTag.localName().impl(), createEPubCaseElementWrapper);
       map.set(epub_defaultTag.localName().impl(), createEPubDefaultElementWrapper);
       map.set(epub_switchTag.localName().impl(), createEPubSwitchElementWrapper);
    }
    CreateepubElementWrapperFunction createWrapperFunction = map.get(element->localName().impl());
    if (createWrapperFunction)
        return createWrapperFunction(exec, globalObject, element);
    return CREATE_DOM_WRAPPER(exec, globalObject, epubElement, element.get());
}

}

#endif
